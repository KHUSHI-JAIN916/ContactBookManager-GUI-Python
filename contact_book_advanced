import tkinter as tk
from tkinter import ttk, messagebox
import csv
import os

CONTACTS_FILE = "contacts_data.csv"

# Load data
def load_contacts():
    if not os.path.exists(CONTACTS_FILE):
        return []
    with open(CONTACTS_FILE, "r") as file:
        return list(csv.reader(file))

# Save data
def save_contacts(data):
    with open(CONTACTS_FILE, "w", newline="") as file:
        writer = csv.writer(file)
        writer.writerows(data)

# Update table
def refresh_table():
    tree.delete(*tree.get_children())
    for i, row in enumerate(load_contacts(), start=1):
        tree.insert("", "end", values=(i, *row))

# Add new contact
def add_contact():
    name = name_entry.get().strip()
    phone = phone_entry.get().strip()
    email = email_entry.get().strip()
    address = address_entry.get().strip()
    if not name or not phone:
        messagebox.showerror("Missing Info", "Name and phone number are required.")
        return
    contacts = load_contacts()
    contacts.append([name, phone, email, address])
    save_contacts(contacts)
    clear_inputs()
    refresh_table()

# Update existing contact
def update_contact():
    selected = tree.selection()
    if not selected:
        messagebox.showinfo("No Selection", "Select a contact to update.")
        return
    index = int(tree.item(selected)["values"][0]) - 1
    contacts = load_contacts()
    updated = [name_entry.get().strip(), phone_entry.get().strip(),
               email_entry.get().strip(), address_entry.get().strip()]
    if not updated[0] or not updated[1]:
        messagebox.showerror("Missing Info", "Name and phone are required.")
        return
    contacts[index] = updated
    save_contacts(contacts)
    clear_inputs()
    refresh_table()

# Delete contact
def delete_contact():
    selected = tree.selection()
    if not selected:
        messagebox.showinfo("No Selection", "Select a contact to delete.")
        return
    index = int(tree.item(selected)["values"][0]) - 1
    contacts = load_contacts()
    del contacts[index]
    save_contacts(contacts)
    refresh_table()

# Search contacts
def search_contact():
    query = search_entry.get().strip().lower()
    matches = []
    for i, row in enumerate(load_contacts(), start=1):
        if query in row[0].lower() or query in row[1]:
            matches.append((i, *row))
    tree.delete(*tree.get_children())
    for match in matches:
        tree.insert("", "end", values=match)

def clear_inputs():
    for entry in [name_entry, phone_entry, email_entry, address_entry, search_entry]:
        entry.delete(0, tk.END)

# GUI Layout
root = tk.Tk()
root.title("üìá Contact Book Manager")

tk.Label(root, text="Name").grid(row=0, column=0)
name_entry = tk.Entry(root, width=30)
name_entry.grid(row=0, column=1)

tk.Label(root, text="Phone").grid(row=1, column=0)
phone_entry = tk.Entry(root, width=30)
phone_entry.grid(row=1, column=1)

tk.Label(root, text="Email").grid(row=2, column=0)
email_entry = tk.Entry(root, width=30)
email_entry.grid(row=2, column=1)

tk.Label(root, text="Address").grid(row=3, column=0)
address_entry = tk.Entry(root, width=30)
address_entry.grid(row=3, column=1)

tk.Button(root, text="‚ûï Add", command=add_contact).grid(row=0, column=2, padx=10)
tk.Button(root, text="üìù Update", command=update_contact).grid(row=1, column=2)
tk.Button(root, text="‚ùå Delete", command=delete_contact).grid(row=2, column=2)

tk.Label(root, text="üîç Search").grid(row=4, column=0)
search_entry = tk.Entry(root, width=30)
search_entry.grid(row=4, column=1)
tk.Button(root, text="Search", command=search_contact).grid(row=4, column=2)
tk.Button(root, text="üîÑ Refresh", command=refresh_table).grid(row=4, column=3)

columns = ("S.No", "Name", "Phone", "Email", "Address")
tree = ttk.Treeview(root, columns=columns, show="headings")
for col in columns:
    tree.heading(col, text=col)
    tree.column(col, anchor=tk.CENTER)
tree.grid(row=5, column=0, columnspan=4, pady=10)

refresh_table()
root.mainloop()
